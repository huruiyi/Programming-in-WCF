//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace _00ConApp.WCFClient.CalcServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcServiceReference.ICalcService")]
    public interface ICalcService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/DoWork", ReplyAction="http://tempuri.org/ICalcService/DoWorkResponse")]
        string DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/DoWork", ReplyAction="http://tempuri.org/ICalcService/DoWorkResponse")]
        System.Threading.Tasks.Task<string> DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Add", ReplyAction="http://tempuri.org/ICalcService/AddResponse")]
        int Add(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Add", ReplyAction="http://tempuri.org/ICalcService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Sub", ReplyAction="http://tempuri.org/ICalcService/SubResponse")]
        int Sub(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Sub", ReplyAction="http://tempuri.org/ICalcService/SubResponse")]
        System.Threading.Tasks.Task<int> SubAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Mult", ReplyAction="http://tempuri.org/ICalcService/MultResponse")]
        int Mult(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Mult", ReplyAction="http://tempuri.org/ICalcService/MultResponse")]
        System.Threading.Tasks.Task<int> MultAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Div", ReplyAction="http://tempuri.org/ICalcService/DivResponse")]
        int Div(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Div", ReplyAction="http://tempuri.org/ICalcService/DivResponse")]
        System.Threading.Tasks.Task<int> DivAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Add_decimal", ReplyAction="http://tempuri.org/ICalcService/Add_decimalResponse")]
        _00ConApp.WCFClient.CalcServiceReference.Add_decimalResponse Add_decimal(_00ConApp.WCFClient.CalcServiceReference.Add_decimalRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcService/Add_decimal", ReplyAction="http://tempuri.org/ICalcService/Add_decimalResponse")]
        System.Threading.Tasks.Task<_00ConApp.WCFClient.CalcServiceReference.Add_decimalResponse> Add_decimalAsync(_00ConApp.WCFClient.CalcServiceReference.Add_decimalRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Add_decimal", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class Add_decimalRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Number1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Number2;
        
        public Add_decimalRequest() {
        }
        
        public Add_decimalRequest(string Number1, string Number2) {
            this.Number1 = Number1;
            this.Number2 = Number2;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Add_decimalResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class Add_decimalResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public decimal Add_decimalResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string error;
        
        public Add_decimalResponse() {
        }
        
        public Add_decimalResponse(decimal Add_decimalResult, string error) {
            this.Add_decimalResult = Add_decimalResult;
            this.error = error;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcServiceChannel : _00ConApp.WCFClient.CalcServiceReference.ICalcService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcServiceClient : System.ServiceModel.ClientBase<_00ConApp.WCFClient.CalcServiceReference.ICalcService>, _00ConApp.WCFClient.CalcServiceReference.ICalcService {
        
        public CalcServiceClient() {
        }
        
        public CalcServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DoWork() {
            return base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task<string> DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public int Add(int a, int b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int a, int b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public int Sub(int a, int b) {
            return base.Channel.Sub(a, b);
        }
        
        public System.Threading.Tasks.Task<int> SubAsync(int a, int b) {
            return base.Channel.SubAsync(a, b);
        }
        
        public int Mult(int a, int b) {
            return base.Channel.Mult(a, b);
        }
        
        public System.Threading.Tasks.Task<int> MultAsync(int a, int b) {
            return base.Channel.MultAsync(a, b);
        }
        
        public int Div(int a, int b) {
            return base.Channel.Div(a, b);
        }
        
        public System.Threading.Tasks.Task<int> DivAsync(int a, int b) {
            return base.Channel.DivAsync(a, b);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        _00ConApp.WCFClient.CalcServiceReference.Add_decimalResponse _00ConApp.WCFClient.CalcServiceReference.ICalcService.Add_decimal(_00ConApp.WCFClient.CalcServiceReference.Add_decimalRequest request) {
            return base.Channel.Add_decimal(request);
        }
        
        public decimal Add_decimal(string Number1, string Number2, out string error) {
            _00ConApp.WCFClient.CalcServiceReference.Add_decimalRequest inValue = new _00ConApp.WCFClient.CalcServiceReference.Add_decimalRequest();
            inValue.Number1 = Number1;
            inValue.Number2 = Number2;
            _00ConApp.WCFClient.CalcServiceReference.Add_decimalResponse retVal = ((_00ConApp.WCFClient.CalcServiceReference.ICalcService)(this)).Add_decimal(inValue);
            error = retVal.error;
            return retVal.Add_decimalResult;
        }
        
        public System.Threading.Tasks.Task<_00ConApp.WCFClient.CalcServiceReference.Add_decimalResponse> Add_decimalAsync(_00ConApp.WCFClient.CalcServiceReference.Add_decimalRequest request) {
            return base.Channel.Add_decimalAsync(request);
        }
    }
}
